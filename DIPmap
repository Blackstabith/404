#!/usr/bin/env python3

import argparse
import os
import socket
import requests

# Function to get IP addresses for a domain
def get_ips(domain):
    try:
        ip_addresses = socket.gethostbyname_ex(domain)
        return ip_addresses[2]
    except socket.gaierror:
        return []

# Function to check if a domain is in scope on HackerOne
def check_hackerone_scope(domain):
    api_key = os.getenv('HACKERONE_API_KEY')  # Get the API key from the environment variable
    if not api_key:
        print("API key not found. Please set it as an environment variable.")
        return None

    url = f"https://api.hackerone.com/v1/targets?filter[domain]={domain}"
    
    # Print the URL being requested for debugging
    print(f"Requesting URL: {url}")

    headers = {
        "Authorization": f"Bearer {api_key}"
    }

    response = requests.get(url, headers=headers)
    
    # Print the response status and text to check what we got from the API
    print(f"Response: {response.status_code} {response.text}")

    if response.status_code == 200:
        data = response.json()
        print(f"Data: {data}")  # Print the response data for further debugging
        if data['data']:
            return True  # Domain is in scope
        else:
            return False  # Domain is not in scope
    else:
        print(f"Error: {response.status_code}, {response.text}")
        return None

# Function to print the script banner
def print_banner():
    print("Printing the banner...")  # Debug line to confirm if it's called
    banner = r"""
     ____  _______ ____   __  __    _    ____  
    |  _ \|__  __||    \ |  \/  |  / \  |  _ \ 
    | | | |  | |  | |_) || |\/| | / _ \ | |_) |
    | |_| |__| |__|  __/ | |  | |/ ___ \|  __/ 
    |____/|_______|__|   |_|  |_/_/   \_\_|  

                     DIPmap
                Map Domains to IPs
                 """
    print(banner)

# Argument parsing
parser = argparse.ArgumentParser(description="DIPmap: Map domains to IPs and check HackerOne scope.")
parser.add_argument('-d', '--domain', help="Single domain to check", required=False)
parser.add_argument('-f', '--file', help="File containing list of domains", required=False)
parser.add_argument('-I', '--ip', help="Show IP addresses", action='store_true')
parser.add_argument('-S', '--check-scope', help="Check if the domain is in scope (requires domain)", action='store_true')
args = parser.parse_args()

# Print banner on execution
print_banner()  # This should print the banner when you run the script

# Handle domain or file input
if args.file:
    with open(args.file, 'r') as file:
        domains = file.readlines()
    domains = [domain.strip() for domain in domains]
elif args.domain:
    domains = [args.domain]
else:
    print("Error: You must specify a domain with -d or provide a file with -f.")
    exit(1)

# Process each domain
for domain in domains:
    print(f"\nProcessing domain: {domain}")

    # Show IP addresses if -I is used
    if args.ip:
        ip_addresses = get_ips(domain)
        if ip_addresses:
            print(f"  IP Addresses: {', '.join(ip_addresses)}")
        else:
            print("  No IP addresses found.")

    # Check HackerOne scope if -S is used
    if args.check_scope:
        in_scope = check_hackerone_scope(domain)
        if in_scope is None:
            print(f"Error checking scope for {domain}.")
        else:
            scope_status = "IN SCOPE" if in_scope else "OUT OF SCOPE"
            print(f"  Scope Status: {scope_status}")
