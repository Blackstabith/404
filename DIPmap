#!/usr/bin/env python3

import argparse
import os
import socket
import requests
import json
import logging
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, Style

# Logging configuration
logging.basicConfig(filename="dipmap_errors.log", level=logging.ERROR, format="%(asctime)s - %(message)s")

# Helper functions
def log_error(error_message):
    """Log errors to a file."""
    logging.error(error_message)

# Predefined port lists
DEFAULT_PORTS = [80, 443, 8080, 8443]
QUICK_SCAN_PORTS = [21, 22, 80, 443]

# Check `security.txt`
def check_security_txt(domain):
    """Check for a security.txt file on the domain."""
    url = f"https://{domain}/.well-known/security.txt"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print(Fore.GREEN + f"Security.txt found at {url}" + Style.RESET_ALL)
            return response.text
        else:
            print(Fore.YELLOW + f"No security.txt found at {url}" + Style.RESET_ALL)
            return None
    except requests.exceptions.RequestException as e:
        log_error(f"Error fetching security.txt for {domain}: {e}")
        return None

# Check bug bounty directories
def check_bug_bounty_directories(domain):
    """Check known bug bounty directories for the domain."""
    results = []
    # Example: HackerOne directory
    hackerone_url = f"https://hackerone.com/{domain}"
    response = requests.get(hackerone_url)
    if response.status_code == 200:
        results.append(Fore.GREEN + f"Found on HackerOne: {hackerone_url}" + Style.RESET_ALL)

    # Example: Bugcrowd directory
    bugcrowd_url = f"https://bugcrowd.com/{domain}"
    response = requests.get(bugcrowd_url)
    if response.status_code == 200:
        results.append(Fore.GREEN + f"Found on Bugcrowd: {bugcrowd_url}" + Style.RESET_ALL)

    if not results:
        results.append(Fore.YELLOW + f"No bug bounty directories found for {domain}" + Style.RESET_ALL)

    return results

# Check crowdsourced lists (e.g., disclose.io)
def check_crowdsourced_lists(domain):
    """Search crowdsourced lists for the domain."""
    # This example uses a local JSON file for simplicity.
    # Replace with actual disclose.io API or external source if available.
    crowdsourced_list = ["example.com", "test.com"]  # Example list
    if domain in crowdsourced_list:
        return Fore.GREEN + f"Found in disclose.io repository: {domain}" + Style.RESET_ALL
    else:
        return Fore.YELLOW + f"Domain not found in disclose.io repository: {domain}" + Style.RESET_ALL

# Banner Display
def print_banner():
    banner = r"""
     ____  _______ ____   __  __    _    ____  
    |  _ \|__  __||    \ |  \/  |  / \  |  _ \ 
    | | | |  | |  | |_) || |\/| | / _ \ | |_) |
    | |_| |__| |__|  __/ | |  | |/ ___ \|  __/ 
    |____/|_______|__|   |_|  |_/_/   \_\_|  

                     DIPmap
                Map Domains to IPs
    """
    print(banner)

# API Key Management
def load_api_keys():
    """Load API keys from environment variables or a JSON config file."""
    api_keys = {
        "hackerone": os.getenv("HACKERONE_API_KEY"),
        "bugcrowd": os.getenv("BUGCROWD_API_KEY"),
        "intigriti": os.getenv("INTIGRITI_API_KEY")
    }
    
    if None in api_keys.values():
        try:
            with open("api_keys.json", "r") as file:
                config = json.load(file)
                for key in api_keys:
                    if not api_keys[key]:  # Load only missing keys
                        api_keys[key] = config.get(key)
        except FileNotFoundError:
            print(Fore.RED + "No API keys found in environment or config file." + Style.RESET_ALL)

    return api_keys

# Scope Checking
def check_scope(domain, platform, api_key):
    """Check if a domain is in scope on a given platform."""
    urls = {
        "hackerone": f"https://api.hackerone.com/v1/targets?filter[domain]={domain}",
        # Add more platforms as needed
    }
    
    url = urls.get(platform)
    if not url:
        print(f"{Fore.RED}Unsupported platform: {platform}{Style.RESET_ALL}")
        return None

    headers = {"Authorization": f"Bearer {api_key}"}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        if data.get('data'):
            print(f"{Fore.GREEN}[in scope] {domain} on {platform}{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.RED}[out of scope] {domain} on {platform}{Style.RESET_ALL}")
            return False
    except requests.exceptions.RequestException as e:
        logging.error(f"Error checking scope for {domain} on {platform}: {e}")
        print(f"Error: Unable to check scope for {domain} on {platform}")
        return None

# IP Resolution
def get_ips(domain):
    """Resolve IP addresses for a domain."""
    try:
        return socket.gethostbyname_ex(domain)[2]
    except socket.gaierror:
        print(f"Error: Unable to resolve IP addresses for {domain}")
        return []

# Geolocation
def get_geolocation(ip):
    """Fetch geolocation data for an IP address."""
    try:
        response = requests.get(f"http://ip-api.com/json/{ip}", timeout=5)
        response.raise_for_status()
        data = response.json()
        if data['status'] == 'fail':
            return f"Geolocation data unavailable for {ip}"
        return f"IP: {ip} - Country: {data['country']}, Region: {data['regionName']}, City: {data['city']}"
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching geolocation for {ip}: {e}")
        return f"Error: {e}"

# Version Checking
def get_version(ip):
    """Get server version information from HTTP headers."""
    try:
        response = requests.get(f"http://{ip}", timeout=5)
        response.raise_for_status()
        return response.headers.get('Server', 'No server info')
    except requests.exceptions.RequestException as e:
        logging.error(f"Error retrieving version for {ip}: {e}")
        return None

# Port Scanning
def scan_port(ip, port, timeout=2):
    """Scan a single port."""
    try:
        with socket.create_connection((ip, port), timeout=timeout):
            return port
    except (socket.timeout, socket.error):
        return None

def port_scan(ip, ports, timeout=2, threads=4):
    """Perform a port scan."""
    open_ports = []
    with ThreadPoolExecutor(max_workers=threads) as executor:
        results = executor.map(lambda port: scan_port(ip, port, timeout), ports)
        for port, result in zip(ports, results):
            if result:
                open_ports.append(result)
    return open_ports

def perform_port_scan(ip, quick=False, custom_ports=None, timeout=2, threads=4):
    """Handle port scanning with quick or custom options."""
    if custom_ports:
        ports_to_scan = custom_ports
        print(f"Performing custom port scan for {ip}...")
    elif quick:
        ports_to_scan = QUICK_SCAN_PORTS
        print(f"Performing quick port scan for {ip}...")
    else:
        ports_to_scan = DEFAULT_PORTS
        print(f"Performing full port scan for {ip}...")
    
    open_ports = port_scan(ip, ports_to_scan, timeout, threads)
    if open_ports:
        print(f"Open ports for {ip}: {', '.join(map(str, open_ports))}")
    else:
        print(f"No open ports detected for {ip}.")

# Command-Line Arguments
def parse_args():
    parser = argparse.ArgumentParser(description="DIPmap: Map domains to IPs, check scope, and perform scans.")
    parser.add_argument('-d', '--domain', help="Single domain to check")
    parser.add_argument('-S', '--scope-check', help="Check if the domain is in scope on a platform (e.g., 'hackerone')")
    parser.add_argument('-G', '--geolocation', help="Show geolocation of IP addresses", action='store_true')
    parser.add_argument('-P', '--port-scan', help="Perform a port scan on the domain's IPs", action='store_true')
    parser.add_argument('--quick-scan', help="Perform a quick port scan", action='store_true')
    parser.add_argument('-p', '--ports', help="Comma-separated list of ports to scan (e.g., 22,53,80)")
    parser.add_argument('-V', '--version', help="Retrieve server version information for the domain's IPs", action='store_true')
    return parser.parse_args()

def parse_custom_ports(port_string):
    """Parse a comma-separated list of ports."""
    try:
        return [int(port.strip()) for port in port_string.split(',')]
    except ValueError:
        print("Error: Ports must be a comma-separated list of integers.")
        exit(1)

# Main Execution
def main():
    args = parse_args()
    print_banner()

   if args.domain and args.check_disclosure:
        domain = args.domain
        print(Fore.CYAN + f"Checking disclosure policies for {domain}..." + Style.RESET_ALL)

        # Check `security.txt`
        security_txt = check_security_txt(domain)
        if security_txt:
            print(f"Security.txt content:\n{security_txt}")

        # Check bug bounty directories
        bounty_results = check_bug_bounty_directories(domain)
        for result in bounty_results:
            print(result)

        # Check crowdsourced lists
        crowdsourced_result = check_crowdsourced_lists(domain)
        print(crowdsourced_result)

    else:
        print(Fore.RED + "Error: Please provide a domain with the --check-disclosure flag." + Style.RESET_ALL) 
  
if args.domain:
        ip_addresses = get_ips(args.domain)
        if ip_addresses:
            print(f"IP Addresses for {args.domain}: {', '.join(ip_addresses)}")

            if args.geolocation:
                for ip in ip_addresses:
                    print(get_geolocation(ip))

            if args.port_scan or args.quick_scan or args.ports:
                custom_ports = parse_custom_ports(args.ports) if args.ports else None
                for ip in ip_addresses:
                    perform_port_scan(ip, quick=args.quick_scan, custom_ports=custom_ports)
        else:
            print(f"Could not resolve IP addresses for {args.domain}.")

    if args.domain and args.scope_check:
        api_keys = load_api_keys()
        platform = args.scope_check.lower()
        api_key = api_keys.get(platform)
        if api_key:
            check_scope(args.domain, platform, api_key)
        else:
            print(f"{Fore.RED}No API key found for {platform}. Please add it to the configuration.{Style.RESET_ALL}")

    if args.version:
       for ip in ip_addresses:
           version = get_version(ip)
           if version:
               print(f"Version info for {ip}: {version}")
           else:
               print(f"Could not retrieve version info for {ip}")

if __name__ == "__main__":
    main()
