#!/usr/bin/env python3  
  
import argparse  
import json  
import logging  
import os  
import socket  
from concurrent.futures import ThreadPoolExecutor  
from colorama import Fore, Style  
from urllib.parse import urlparse  
import requests  
from requests.exceptions import RequestException  
  
# Constants  
DEFAULT_PORTS = [80, 443, 8080, 8443]  
QUICK_SCAN_PORTS = [21, 22, 80, 443]  
TIMEOUT = 5  
  
# Load API keys from environment variables or a JSON config file  
def load_api_keys():  
   api_keys = {  
      "hackerone": os.getenv("HACKERONE_API_KEY"),  
      "bugcrowd": os.getenv("BUGCROWD_API_KEY"),  
      "intigriti": os.getenv("INTIGRITI_API_KEY")  
   }  
    
   if None in api_keys.values():  
      try:  
        with open("api_keys.json", "r") as file:  
           config = json.load(file)  
           for key in api_keys:  
              if not api_keys[key]:  # Load only missing keys  
                api_keys[key] = config.get(key)  
      except FileNotFoundError:  
        print(Fore.RED + "No API keys found in environment or config file." + Style.RESET_ALL)  
  
   return api_keys  
  
# Load the disclose.io JSON data  
def load_disclosures(file_path):  
   try:  
      with open(file_path, "r") as file:  
        return json.load(file)  
   except FileNotFoundError:  
      print(Fore.RED + f"Error: {file_path} not found." + Style.RESET_ALL)  
      return []  
  
# Function to extract domain from a URL  
def extract_domain(url):  
   try:  
      parsed_url = urlparse(url)  
      return parsed_url.netloc.lower().replace("www.", "")  # Normalize to remove 'www.'  
   except Exception as e:  
      logging.error(f"Error extracting domain from {url}: {e}")  
      return None  
  
# Function to find and print the program details for a given domain  
def search_domain_in_disclose(domain, disclosures):  
   domain = domain.lower().replace("www.", "")  # Normalize the input domain  
   found = False  
  
   # Iterate over all programs in the JSON data  
   for program in disclosures:  
      # Extract domains from 'policy_url' and 'contact_email'  
      policy_domain = extract_domain(program.get("policy_url", ""))  
      contact_domain = extract_domain(program.get("contact_email", ""))  
  
      # Check if the input domain matches any of the program domains  
      if policy_domain == domain or contact_domain == domain:  
        found = True  
        print(f"Program found: {program['program_name']}")  
        print(f"Policy URL: {program['policy_url']}")  
        print(f"Offers Bounty: {program['offers_bounty']}")  
        print(f"Contact Email: {program['contact_email']}")  
        print(f"Security TXT URL: {program['securitytxt_url']}")  
        print(f"Launch Date: {program['launch_date']}")  
        print(f"Hall of Fame: {program['hall_of_fame']}")  
        print(f"Safe Harbor: {program['safe_harbor']}")  
        print(f"Public Disclosure: {program['public_disclosure']}")  
        print(f"PGP Key: {program['pgp_key']}")  
        print(f"Hiring: {program['hiring']}")  
        print(f"Preferred Languages: {program['preferred_languages']}")  
        print(f"Policy URL Status: {program['policy_url_status']}")  
        print("-" * 50)  # Separator line for better readability  
  
   if not found:  
      print(f"Domain not found in disclose.io repository: {domain}")  
  
# Check `security.txt`  
def check_security_txt(domain):  
   """Check for a security.txt file on the domain."""  
   url = f"https://{domain}/.well-known/security.txt"  
   try:  
      response = requests.get(url, timeout=TIMEOUT)  
      response.raise_for_status()  # Raise HTTPError for bad responses  
      print(Fore.GREEN + f"Security.txt found at {url}" + Style.RESET_ALL)  
      return response.text  
   except RequestException as e:  
      logging.error(f"Error fetching security.txt for {domain}: {e}")  
      print(Fore.RED + f"Error fetching security.txt for {domain}: {e}" + Style.RESET_ALL)  
      return None  
  
# Check bug bounty directories  
def check_bug_bounty_directories(domain):  
   """Check known bug bounty directories for the domain."""  
   results = []  
   directories = {  
      "HackerOne": f"https://hackerone.com/{domain}",  
      "Bugcrowd": f"https://bugcrowd.com/{domain}"  
   }  
   for name, url in directories.items():  
      try:  
        response = requests.get(url, timeout=TIMEOUT)  
        if response.status_code == 200:  
           results.append(Fore.GREEN + f"Found on {name}: {url}" + Style.RESET_ALL)  
        else:  
           results.append(Fore.YELLOW + f"No listing found on {name} for {domain}" + Style.RESET_ALL)  
      except RequestException as e:  
        logging.error(f"Error checking {name} for {domain}: {e}")  
        print(Fore.RED + f"Error checking {name} for {domain}: {e}" + Style.RESET_ALL)  
  
   return results  
  
# Check crowdsourced lists  
def check_crowdsourced_lists(domain):  
   """Search crowdsourced lists for the domain."""  
   # Example: A list of domains that are known to have bug bounty programs  
   crowdsourced_list = ["example.com", "test.com"]  # Replace with the actual source or use a URL to fetch it  
   if domain in crowdsourced_list:  
      return Fore.GREEN + f"Found in disclose.io repository: {domain}" + Style.RESET_ALL  
   else:  
      return Fore.YELLOW + f"Domain not found in disclose.io repository: {domain}" + Style.RESET_ALL  
  
# IP Resolution  
def get_ips(domain):  
   """Resolve IP addresses for a domain."""  
   try:  
      return socket.gethostbyname_ex(domain)[2]  
   except socket.gaierror:  
      logging.error(f"Error resolving IP addresses for {domain}")  
      print(f"Error: Unable to resolve IP addresses for {domain}")  
      return []  
  
# Geolocation  
def get_geolocation(ip):  
   """Fetch geolocation data for an IP address."""  
   try:  
      response = requests.get(f"http://ip-api.com/json/{ip}", timeout=TIMEOUT)  
      response.raise_for_status()  
      data = response.json()  
      if data['status'] == 'fail':  
        return f"Geolocation data unavailable for {ip}"  
      return f"IP: {ip} - Country: {data['country']}, Region: {data['regionName']}, City: {data['city']}"  
   except RequestException as e:  
      logging.error(f"Error fetching geolocation for {ip}: {e}")  
      return f"Error: {e}"  
  
# Version Checking  
def get_version(ip):  
   """Get server version information from HTTP headers."""  
   try:  
      response = requests.get(f"http://{ip}", timeout=TIMEOUT)  
      response.raise_for_status()  
      return response.headers.get('Server', 'No server info')  
   except RequestException as e:  
      logging.error(f"Error retrieving version for {ip}: {e}")  
      return None  
  
# Port Scanning  
def scan_port(ip, port, timeout=TIMEOUT):  
   """Scan a single port."""  
   try:  
      with socket.create_connection((ip, port), timeout=timeout):  
        return port  
   except (socket.timeout, socket.error):  
      return None  
  
def port_scan(ip, ports, timeout=TIMEOUT, threads=4):  
   """Perform a port scan."""  
   open_ports = []  
   with ThreadPoolExecutor(max_workers=threads) as executor:  
      results = executor.map(lambda port: scan_port(ip, port, timeout), ports)  
      for port, result in zip(ports, results):  
        if result:  
           open_ports.append(result)  
   return open_ports  
  
def perform_port_scan(ip, quick=False, custom_ports=None, timeout=TIMEOUT, threads=4):  
   """Handle port scanning with quick or custom options."""  
   if custom_ports:  
      ports_to_scan = custom_ports  
      print(f"Performing custom port scan for {ip}...")  
   elif quick:  
      ports_to_scan = QUICK_SCAN_PORTS  
      print(f"Performing quick port scan for {ip}...")  
   else:  
      ports_to_scan = DEFAULT_PORTS  
      print(f"Performing full port scan for {ip}...")  
    
   open_ports = port_scan(ip, ports_to_scan, timeout, threads)  
   if open_ports:  
      print(f"Open ports for {ip}: {', '.join(map(str, open_ports))}")  
   else:  
      print(f"No open ports detected for {ip}.")  
  
# Banner Display  
def print_banner():  
   banner = r"""  
    ____  _______ ____  __  __   _   ____   
   |  _ \|__  __||   \ |  \/  |  / \  |  _ \  
   | | | |  | |  | |_) || |\/| | / _ \ | |_) |  
   | |_| |__| |__|  __/ | |  | |/ ___ \|  __/  
   |____/|_______|__|  |_|  |_/_/  \_\_|   
  
              DIPmap  
           Map Domains to IPs  
   """  
   print(banner)  
  
# Command-Line Arguments  
def parse_args():  
   parser = argparse.ArgumentParser(description="DIPmap: Map domains to IPs, check scope, and perform scans.")  
   parser.add_argument('-d', '--domain', help="Single domain to check")  
   parser.add_argument('-S', '--scope-check', help="Check if the domain is in scope on a platform (e.g., 'hackerone')")  
   parser.add_argument('-G', '--geolocation', help="Show geolocation of IP addresses", action='store_true')  
   parser.add_argument('-P', '--port-scan', help="Perform a port scan on the domain's IPs", action='store_true')  
   parser.add_argument('--quick-scan', help="Perform a quick port scan", action='store_true')  
   parser.add_argument('-p', '--ports', help="Comma-separated list of ports to scan (e.g., 22,53,80)")  
   parser.add_argument('-V', '--version', help="Retrieve server version information for the domain's IPs", action='store_true')  
   parser.add_argument('-CD', '--check-disclosure', help="Check if the domain has a vulnerability disclosure or bug bounty program", action='store_true')  
   return parser.parse_args()  
  
# Main Execution  
def main():  
   args = parse_args()  
   print_banner()  
  
   logging.basicConfig(filename="dipmap_errors.log", level=logging.ERROR, format="%(asctime)s - %(message)s")  
  
   api_keys = load_api_keys()  
  
   if not args.domain:  
      print(Fore.RED + "Error: Please specify a domain using the '-d' or '--domain' flag." + Style.RESET_ALL)  
      return  # Exit if no domain is provided  
  
   if args.check_disclosure:  
      domain = args.domain  
      print(Fore.CYAN + f"Checking disclosure policies for {domain}..." + Style.RESET_ALL)  
  
      # Load the disclose.io JSON data  
      disclose_file = "/home/paladin/scripts/program-list.json"  
      disclosures = load_disclosures(disclose_file)  
  
      # Check `security.txt`  
      security_txt = check_security_txt(domain)  
      if security_txt:  
        print(f"Security.txt content:\n{security_txt}")  
  
      # Check bug bounty directories  
      bounty_results = check_bug_bounty_directories(domain)  
      for result in bounty_results:  
        print(result)  
  
      # Check crowdsourced lists  
      crowdsourced_result = check_crowdsourced_lists(domain)  
      print(crowdsourced_result)  
  
      # Search domain in disclose.io repository  
      search_domain_in_disclose(domain, disclosures)  
  
   if args.domain:  
      ip_addresses = get_ips(args.domain)  
      if ip_addresses:  
        print(f"IP Addresses for {args.domain}: {', '.join(ip_addresses)}")  
  
        if args.geolocation:  
           for ip in ip_addresses:  
              print(get_geolocation(ip))  
  
        if args.port_scan or args.quick_scan or args.ports:  
           custom_ports = [int(port.strip()) for port in args.ports.split(',')] if args.ports else None  
           for ip in ip_addresses:  
              perform_port_scan(ip, quick=args.quick_scan, custom_ports=custom_ports)  
  
        if args.version:  
           for ip in ip_addresses:  
              version = get_version(ip)  
              if version:  
                print(f"Version info for {ip}: {version}")  
              else:  
                print(f"Could not retrieve version info for {ip}")  
      else:  
        print(f"Could not resolve IP addresses for {args.domain}.")  
  
if __name__ == "__main__":  
   main()
