#!/usr/bin/env python3

import argparse
import os
import socket
import requests

# Function to get IP addresses for a domain
def get_ips(domain):
    try:
        ip_addresses = socket.gethostbyname_ex(domain)
        return ip_addresses[2]
    except socket.gaierror:
        return []

# Function to check if a domain is in scope on HackerOne
def check_hackerone_scope(domain):
    api_key = os.getenv('HACKERONE_API_KEY')  # Get the API key from the environment variable
    if not api_key:
        print("API key not found. Please set it as an environment variable.")
        return None

    url = f"https://api.hackerone.com/v1/targets?filter[domain]={domain}"
    headers = {
        "Authorization": f"Bearer {api_key}"
    }

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if data['data']:
            return True  # Domain is in scope
        else:
            return False  # Domain is not in scope
    else:
        print(f"Error: {response.status_code}, {response.text}")
        return None

# Function to get geolocation of an IP address
def get_ip_geolocation(ip):
    try:
        # Using ipinfo.io API for geolocation
        url = f"https://ipinfo.io/{ip}/json"
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            return data.get("country", "Unknown"), data.get("city", "Unknown")
        else:
            return "Unknown", "Unknown"
    except requests.exceptions.RequestException as e:
        print(f"Error fetching geolocation: {e}")
        return "Unknown", "Unknown"

# Function to check domain health (whether it resolves to an IP)
def check_domain_health(domain):
    try:
        socket.gethostbyname(domain)
        return True  # Domain resolves successfully
    except socket.gaierror:
        return False  # Domain resolution failed

# Function to print the script banner
def print_banner():
    banner = r"""
     ____  _______ ____   __  __    _    ____  
    |  _ \|__  __||    \ |  \/  |  / \  |  _ \ 
    | | | |  | |  | |_) || |\/| | / _ \ | |_) |
    | |_| |__| |__|  __/ | |  | |/ ___ \|  __/ 
    |____/|_______|__|   |_|  |_/_/   \_\_|  

                     DIPmap
                Map Domains to IPs
                 """
    print(banner)

# Argument parsing
parser = argparse.ArgumentParser(description="DIPmap: Map domains to IPs and check HackerOne scope.")
parser.add_argument('-d', '--domain', help="Single domain to check", required=False)
parser.add_argument('-f', '--file', help="File containing list of domains", required=False)
parser.add_argument('-I', '--ip', help="Show IP addresses", action='store_true')
parser.add_argument('-S', '--check-scope', help="Check if the domain is in scope (requires domain)", action='store_true')
parser.add_argument('-G', '--geolocation', help="Get geolocation of IPs", action='store_true')
parser.add_argument('-H', '--health', help="Check domain health", action='store_true')
args = parser.parse_args()

# Print banner on execution
print_banner()

# Process the domain input or file
if args.domain:
    domains = [args.domain]
elif args.file:
    with open(args.file, 'r') as f:
        domains = f.read().splitlines()
else:
    print("No domain or file input provided. Exiting.")
    exit(1)

# Iterate over the domains
for domain in domains:
    print(f"Processing domain: {domain}")
    
    # Get IP addresses for the domain
    ip_addresses = get_ips(domain)
    if ip_addresses:
        print(f"IP Addresses: {', '.join(ip_addresses)}")
        if args.geolocation:
            for ip in ip_addresses:
                country, city = get_ip_geolocation(ip)
                print(f"Geolocation for IP {ip}: {city}, {country}")
    else:
        print("No IP addresses found.")
    
    # Domain health check
    if args.health:
        is_healthy = check_domain_health(domain)
        health_status = "Healthy" if is_healthy else "Unhealthy"
        print(f"Domain health status: {health_status}")
    
    # Check if the domain is in scope (HackerOne)
    if args.check_scope:
        in_scope = check_hackerone_scope(domain)
        if in_scope is None:
            print(f"Error checking scope for {domain}.")
        elif in_scope:
            print(f"{domain} is in scope on HackerOne.")
        else:
            print(f"{domain} is not in scope on HackerOne.")
